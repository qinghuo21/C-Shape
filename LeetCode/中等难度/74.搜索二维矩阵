题目：
编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
 

示例 1：


输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
输出：true
示例 2：


输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
输出：false
 

提示：

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104






### 解题思路
对比每行第一项与target简单锁定范围后进行遍历查询
### 代码

```csharp
public class Solution {
    public bool SearchMatrix(int[][] matrix, int target) {
            //坐标初始化
            int x, y;
            x = y = 0;


            while (true)
            {
                if (matrix[x][y] == target) //某行第一项对比target
                    return true;
                else if (matrix[x][y] < target && x!=matrix.GetLength(0) - 1) //在不是最后一行的前提下如果某行第一项小于target则放弃查询这一行
                {
                    x++;
                }
                else if(matrix[x][y] > target || x==matrix.GetLength(0) - 1) //如果某行第一项大于target或已经到达最后一行，则进行遍历查询
                {
                    if(x>0 && matrix[x][0] > target ){ //如果不止有一行，且某行第一项大于target
                        for (int i = 0; i < matrix[x-1].Length; i++)
                            {
                                if (matrix[x-1][i] == target)
                                    return true;
                            }  
                    }
                    else{ //如果仅有1行，或者已经到达最后一行
                        foreach(int item in matrix[x]){
                            if (item == target)
                                return true;
                        }
                    }
                    
                    break;
                }
                

            }

            return false;
    }
}
```
